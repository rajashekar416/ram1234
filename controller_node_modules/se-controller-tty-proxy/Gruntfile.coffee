"use strict"

module.exports = (grunt)->
  TEST_DIR          = "test"
  TEST_LOCAL_DIR    = "#{TEST_DIR}/local"
  TEST_UNIT_DIR     = "#{TEST_DIR}/unit"
  REPORT_DIR        = "test-reports"
  SRC_DIR           = "src"
  OUTPUT_DIR        = "out"

  # load all grunt tasks
  (require "matchdep").filterDev("grunt-*").forEach(grunt.loadNpmTasks)

  _    = grunt.util._
  path = require "path"

  # Project configuration.
  grunt.initConfig

    pkg: grunt.file.readJSON("package.json")
    coffeelint:
      gruntfile:
        src: "<%= watch.gruntfile.files %>"
      lib:
        src: "<%= watch.lib.files %>"
      test:
        src: "<%= watch.test.files %>"
      options:
        configFile: "node_modules/se-common-resources/coffeelint-rules.json"

    coffee:
      lib:
        expand : true
        cwd    : "#{SRC_DIR}/lib/"
        src    : ["**/*.coffee"]
        dest   : "#{OUTPUT_DIR}/lib/"
        ext    : ".js"

    watch:
      options:
        spawn: false
      gruntfile:
        files: "Gruntfile.coffee"
        tasks: ["coffeelint:gruntfile"]
      lib:
        files: [ "#{SRC_DIR}/lib/**/*.coffee"]
        tasks: [ "coffeelint:lib", "coffee:lib", "simplemocha" ]
      test:
        files: [ "#{TEST_DIR}/**/*.coffee"]
        tasks: [ "coffeelint:test", "coffee:test", "simplemocha" ]

    mochaTest:
      testLocal:
        src     : [ "#{TEST_LOCAL_DIR}/*.coffee", "#{TEST_UNIT_DIR}/*.coffee" ]
        options :
          timeout  : 20000
          require  : "#{TEST_DIR}/coverage/blanket"
          reporter : "mocha-multi"

      coverageLocal:
        src     : [ "#{TEST_LOCAL_DIR}/*.coffee", "#{TEST_UNIT_DIR}/*.coffee" ]
        options :
          reporter    : "html-cov"
          quiet       : true
          captureFile : "#{REPORT_DIR}/coverage-local.html"

    shell:
      createReportsDir:
        command : "mkdir -p #{REPORT_DIR}"
        options :
          stdout      : true
          stderr      : true
          failOnError : true

      testLocal:
        command: [
          "grunt mochaTest:testLocal mochaTest:coverageLocal"
        ].join '&&'
        options:
          stdout: true
          stderr: true
          failOnError:true

    clean: [ OUTPUT_DIR, REPORT_DIR ]

  grunt.event.on "watch", (action, files, target)->
    grunt.log.writeln "#{target}: #{files} has #{action}"

    # coffeelint
    grunt.config ["coffeelint", target], src: files

    # coffee
    coffeeData     = grunt.config ["coffee", target]
    files          = [files] if _.isString files
    files          = files.map (file)-> path.relative coffeeData.cwd, file
    coffeeData.src = files

    grunt.config ["coffee", target], coffeeData

  # tasks.
  grunt.registerTask "compile", [ "coffeelint", "coffee" ]

  grunt.registerTask "test-local", ->
    process.env.multi = "xunit=#{REPORT_DIR}/xunit-local.xml json=#{REPORT_DIR}/report-local.json spec=-"
    grunt.task.run [ "compile", "shell:createReportsDir", "shell:testLocal" ]

  grunt.registerTask "test", [ "test-local" ]

  grunt.registerTask "default", [ "compile", "test" ]

