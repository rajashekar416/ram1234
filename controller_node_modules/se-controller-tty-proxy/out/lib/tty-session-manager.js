(function() {
  var _, async, base64id, ttySessionManager, util;

  base64id = require('base64id');

  util = require('util');

  async = require('async');

  _ = require('lodash');


  /**
   * Returns an instance of ttySessionManager
   * @param  {Object} app Express app
   * @return {Object}     An instance of ttySessionManager
   */

  ttySessionManager = function(_redisClientManager) {
    this.redisClientManager = _redisClientManager;
    this.redisStore = this.redisClientManager.getPrimaryCacheClient();
    this.prefix = "tty::session::%s";
    return this;
  };


  /**
   * Starts a new session and send it to other server-app instances through redis
   * @param  {String} username       User name
   * @param  {String} controllerUuid Controller UUID
   * @param  {String} token          (optional) Token used to auth client
   */

  ttySessionManager.prototype.startSession = function(username, controllerUuid, token) {
    var ttySession;
    if (token == null) {
      token = base64id.generateId();
    }
    ttySession = JSON.stringify({
      token: token,
      username: username
    });
    logger.info("Registering session: %s", util.format(this.prefix, controllerUuid));
    return this.redisStore.set(util.format(this.prefix, controllerUuid), ttySession);
  };


  /**
   * Closes a session by deleting it, and send a 'close' event to other server
   * instances through redis.
   * @param  {String} username       User name
   * @param  {String} controllerUuid Controller UUID
   */

  ttySessionManager.prototype.closeSession = function(username, controllerUuid) {
    return this.redisStore.get(util.format(this.prefix, controllerUuid), (function(_this) {
      return function(err, ttySession) {
        ttySession = JSON.parse(ttySession);
        if ((ttySession != null) && ttySession.username === username) {
          return _this.redisStore.del(util.format(_this.prefix, controllerUuid));
        }
      };
    })(this));
  };


  /**
   * Returns 'true' if session is valid, 'false' otherwise.
   * @param  {String} username       User name
   * @param  {String} controllerUuid Controller UUID
   * @param  {String} token          Token used to auth client
   */

  ttySessionManager.prototype.isSessionValid = function(username, controllerUuid, token, done) {
    return this.redisStore.get(util.format(this.prefix, controllerUuid), function(err, ttySession) {
      if (err != null) {
        return done(err);
      } else {
        ttySession = JSON.parse(ttySession);
        return done(null, (ttySession != null) && ttySession.token === token && ttySession.username === username);
      }
    });
  };

  module.exports = {

    /**
     * Returns a unique instance of ttySessionManager
     * @param  {Object} context the application context
     * @return {Object} A unique instance of ttySessionManager
     */
    getInstance: function(context) {
      return this.instance != null ? this.instance : this.instance = new ttySessionManager(context);
    }
  };

}).call(this);
