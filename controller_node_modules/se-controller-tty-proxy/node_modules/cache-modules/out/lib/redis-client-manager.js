(function() {
  var EventEmitter, RedisClientManager, async, aws, netUtils, notificationChannel, notificationEventType, redis, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  async = require('async');

  aws = require('aws-sdk');

  EventEmitter = require('events').EventEmitter;

  redis = require('redis');

  netUtils = require('se-common-utils').netUtils;

  notificationChannel = 'redis_client_manager_channel';

  notificationEventType = 'new_replication_group_topology';


  /**
   * Class that manage the connections with the Redis caches running in a cluster of AWS Elasticache.
   */

  RedisClientManager = (function(_super) {
    __extends(RedisClientManager, _super);


    /**
    * Constructor of RedisClientManager object
    * @param {Object} elastiCache when not null used for mocking, otherwise shall be null
    * @param {Object} redisClient when not null used for mocking, otherwise shall be null
     */

    function RedisClientManager(config, services) {
      this.replicaNodes = [];
      this.reconfiguringOnGoing = false;
      this.notificationSubscriberClient = null;
      this.elastiCache = services.elastiCache, this.redisModule = services.redisModule;
      if (this.redisModule == null) {
        this.redisModule = redis;
      }
      if (config.aws) {
        this.awsSupported = true;
        this.replicationGroupId = config.aws.replicationGroupId;
        if (config.aws.config != null) {
          aws.config.update(config.aws.config);
        }
        if (this.elastiCache == null) {
          this.elastiCache = new aws.ElastiCache();
        }
      } else {
        this.awsSupported = false;
        this.primaryNode = {
          name: "local",
          host: config.host,
          port: config.port
        };
      }
    }


    /**
    * Get the Primary Cache Client (used for writing in the cache) Public
    * @param  {Function} done the continuation callback
     */

    RedisClientManager.prototype.getPrimaryCacheClient = function() {
      return this.primaryNode.redisClient;
    };


    /**
    * Get one of the Replica Cache Client (used for reading from the cache) Public
    * (round-robin of all available Replica Cache Clients)
    * @param  {Function} done the continuation callback
     */

    RedisClientManager.prototype.getReplicaCacheClient = function() {
      var randomIndex;
      if (this.replicaNodes.length === 0) {
        return this.primaryNode.redisClient;
      } else if (this.replicaNodes.length === 1) {
        return this.replicaNodes[0].redisClient;
      } else {
        randomIndex = Math.floor(Math.random() * this.replicaNodes.length);
        return this.replicaNodes[randomIndex].redisClient;
      }
    };

    RedisClientManager.prototype.getSubscriberClient = function() {
      return this.notificationSubscriberClient;
    };


    /**
    * Force the Primary and Replicas clients to reconnect (needed when we got a Primary Cache Node failover) Public
    * @param {boolean} broadcastNotification when set to true will broadcast to every other server-apps the notificationMessage
    * @param  {Function} done the continuation callback
     */

    RedisClientManager.prototype.reconfigureReplicaGroupTopology = function(broadcastNotification, done) {
      if (this.reconfiguringOnGoing) {
        return done();
      } else {
        return this.getReplicaGroupTopology((function(_this) {
          return function(err, topology) {
            if (err != null) {
              return done(err);
            } else {
              if (topology.primary.name === _this.primaryNode.name) {
                return done();
              } else {
                logger.info({
                  old_redis_primary_node: _this.primaryNode.name,
                  old_redis_replica_node: _this.replicaNodes.map(function(replica) {
                    return replica.name;
                  })
                }, "Reconfiguring the Replica Group Topology...");
                _this.reconfiguringOnGoing = true;
                return async.parallel({
                  createMasterClient: function(next) {
                    return _this.createRedisClient(topology.primary.host, topology.primary.port, next);
                  },
                  createReplicaClients: function(next) {
                    return async.map(topology.replicas, function(replica, next) {
                      return _this.createRedisClient(replica.host, replica.port, next);
                    }, next);
                  },
                  createSubscribeClient: function(next) {
                    return _this.createRedisClient(topology.replicas[0].host, topology.replicas[0].port, next);
                  }
                }, function(err, connections) {
                  var event, index, newReplicaNodes, replica, replicaNode, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3;
                  if (err != null) {
                    _this.reconfiguringOnGoing = false;
                    return done(err);
                  } else {
                    topology.primary.redisClient = connections.createMasterClient;
                    if ((_ref = _this.primaryNode.redisClient) != null) {
                      _ref.end();
                    }
                    _this.primaryNode = topology.primary;
                    newReplicaNodes = [];
                    _ref1 = topology.replicas;
                    for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
                      replica = _ref1[index];
                      replicaNode = {
                        name: replica.name,
                        host: replica.host,
                        port: replica.port,
                        redisClient: connections.createReplicaClients[index]
                      };
                      newReplicaNodes.push(replicaNode);
                    }
                    _ref2 = _this.replicaNodes;
                    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                      replica = _ref2[_j];
                      if ((_ref3 = replica.redisClient) != null) {
                        _ref3.end();
                      }
                    }
                    _this.replicaNodes = newReplicaNodes;
                    _this.forceReconnectOnGroing = false;
                    _this.notificationSubscriberClient = connections.createSubscribeClient;
                    _this.notificationSubscriberClient.subscribe(notificationChannel);
                    logger.info({
                      new_redis_primary_node: _this.primaryNode.name,
                      new_redis_replica_node: _this.replicaNodes.map(function(replica) {
                        return replica.name;
                      })
                    });
                    _this.emit('redis-event', 'new-primary-client');
                    if (broadcastNotification) {
                      event = {
                        type: notificationEventType,
                        payload: {
                          from: netUtils.getNetworkAddress()
                        }
                      };
                      connections.createMasterClient.publish(notificationChannel, JSON.stringify(event));
                    }
                    _this.reconfiguringOnGoing = false;
                    return done();
                  }
                });
              }
            }
          };
        })(this));
      }
    };

    RedisClientManager.prototype.getReplicaGroupTopology = function(done) {
      var params;
      params = {
        MaxRecords: 100,
        ReplicationGroupId: this.replicationGroupId
      };
      return this.elastiCache.describeReplicationGroups(params, (function(_this) {
        return function(err, data) {
          var member, nodeGroup, replica, topology, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
          if (err != null) {
            logger.error(err.stack);
            return done(err);
          } else {
            if (data.ReplicationGroups.length === 0 || ((_ref = data.ReplicationGroups[0]) != null ? _ref.ReplicationGroupId : void 0) !== _this.replicationGroupId) {
              return done(new Error(("Cannot retrieve Replication Group information from AWS, expected: " + _this.replicationGroupId + " got: ") + ((_ref1 = data.ReplicationGroups[0]) != null ? _ref1.ReplicationGroupId : void 0)));
            } else if (((_ref2 = data.ReplicationGroups[0]) != null ? _ref2.Status : void 0) !== 'available') {
              return done(new Error("Replication Group status is not available, currentStatus: " + ((_ref3 = data.ReplicationGroups[0]) != null ? _ref3.Status : void 0)));
            } else if (((_ref4 = data.ReplicationGroups[0]) != null ? (_ref5 = _ref4.NodeGroups[0]) != null ? _ref5.length : void 0 : void 0) === 0) {
              return done(new Error("Node Groups of ReplicationGroups is empty"));
            } else {
              nodeGroup = (_ref6 = data.ReplicationGroups[0]) != null ? _ref6.NodeGroups[0] : void 0;
              if (nodeGroup.Status !== 'available') {
                return done(new Error("Node Group status is not available"));
              } else {
                topology = {
                  replicas: [],
                  primary: {
                    host: null,
                    port: null,
                    name: null
                  }
                };
                _ref7 = nodeGroup.NodeGroupMembers;
                for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
                  member = _ref7[_i];
                  if (member.CurrentRole === 'primary') {
                    topology.primary.name = member.CacheClusterId;
                    topology.primary.host = member.ReadEndpoint.Address;
                    topology.primary.port = member.ReadEndpoint.Port;
                  } else {
                    replica = {
                      host: member.ReadEndpoint.Address,
                      port: member.ReadEndpoint.Port,
                      name: member.CacheClusterId
                    };
                    topology.replicas.push(replica);
                  }
                }
                return done(null, topology);
              }
            }
          }
        };
      })(this));
    };

    RedisClientManager.prototype.createRedisClient = function(host, port, done) {
      var client;
      client = this.redisModule.createClient(port, host);
      client.on('error', function(err) {
        return logger.error(err);
      });
      client.on('ready', function() {
        logger.info({
          host: host,
          port: port
        }, "Redis connection established");
        return done(null, client);
      });
      return client.on('message', (function(_this) {
        return function(channel, event) {
          var error;
          if (channel === notificationChannel) {
            logger.info({
              channel: channel,
              event: event
            }, "Event received");
            try {
              event = JSON.parse(event);
              if (event.type === notificationEventType && event.payload.from !== netUtils.getNetworkAddress()) {
                return _this.reconfigureReplicaGroupTopology(false, function(err) {
                  if (err != null) {
                    return logger.error("[redis-client-manager] Unable to reconfigure the Redis Replication Group topology");
                  }
                });
              }
            } catch (_error) {
              error = _error;
              return logger.error(err, event, "[redis-client-manager] JSON Parsing error");
            }
          }
        };
      })(this));
    };

    RedisClientManager.prototype.init = function(done) {
      var host, name, port, self, _ref;
      self = this;
      if (this.awsSupported) {
        return this.getReplicaGroupTopology((function(_this) {
          return function(err, topology) {
            if (err != null) {
              return done(err);
            } else {
              return async.parallel({
                createMasterClient: function(next) {
                  return _this.createRedisClient(topology.primary.host, topology.primary.port, next);
                },
                createReplicaClients: function(next) {
                  return async.map(topology.replicas, function(replica, next) {
                    return _this.createRedisClient(replica.host, replica.port, next);
                  }, next);
                },
                createSubscribeClient: function(next) {
                  var _ref;
                  if (((_ref = topology.replicas) != null ? _ref.length : void 0) < 1) {
                    return next(new Error("The replication group topology must have at least one replica"));
                  } else {
                    return _this.createRedisClient(topology.replicas[0].host, topology.replicas[0].port, next);
                  }
                }
              }, function(err, connections) {
                var index, replica, replicaNode, _i, _len, _ref;
                if (err != null) {
                  return done(err);
                } else {
                  _this.primaryNode = topology.primary;
                  _this.primaryNode.redisClient = connections.createMasterClient;
                  _ref = topology.replicas;
                  for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                    replica = _ref[index];
                    replicaNode = {
                      name: replica.name,
                      host: replica.host,
                      port: replica.port,
                      redisClient: connections.createReplicaClients[index]
                    };
                    _this.replicaNodes.push(replicaNode);
                  }
                  _this.notificationSubscriberClient = connections.createSubscribeClient;
                  _this.notificationSubscriberClient.subscribe(notificationChannel);
                  return done();
                }
              });
            }
          };
        })(this));
      } else {
        _ref = self.primaryNode, name = _ref.name, host = _ref.host, port = _ref.port;
        return async.parallel([
          function(done) {
            return self.createRedisClient(host, port, function(err, client) {
              if (err != null) {
                return done(err);
              } else {
                self.primaryNode.redisClient = client;
                return done();
              }
            });
          }, function(done) {
            return self.createRedisClient(host, port, function(err, client) {
              var replicaNode;
              if (err != null) {
                return done(err);
              } else {
                replicaNode = {
                  name: name,
                  host: host,
                  port: port,
                  redisClient: client
                };
                self.replicaNodes.push(replicaNode);
                return done();
              }
            });
          }, function(done) {
            return self.createRedisClient(host, port, function(err, client) {
              if (err != null) {
                return done(err);
              } else {
                self.notificationSubscriberClient = client;
                return done();
              }
            });
          }
        ], function() {
          return done();
        });
      }
    };

    return RedisClientManager;

  })(EventEmitter);

  module.exports = function(serviceDirectory, services, done) {
    var config, redisClientManager, _ref;
    if (done == null) {
      done = services;
      services = null;
    }
    if (services == null) {
      services = {};
    }
    config = (_ref = serviceDirectory != null ? serviceDirectory.redis : void 0) != null ? _ref : {
      host: 'localhost',
      port: '6379'
    };
    logger.info("Creating a RedisClientManager");
    redisClientManager = new RedisClientManager(config, services);
    return redisClientManager.init(function(err) {
      if (err != null) {
        return done(err);
      } else {
        return done(null, redisClientManager);
      }
    });
  };

}).call(this);
