{
  "stats": {
    "suites": 3,
    "tests": 29,
    "passes": 29,
    "pending": 0,
    "failures": 0,
    "start": "2015-06-26T13:17:39.510Z",
    "end": "2015-06-26T13:17:39.838Z",
    "duration": 328
  },
  "tests": [
    {
      "title": "should add a registered controller",
      "fullTitle": "The controllers-info-cache module should add a registered controller",
      "duration": 2
    },
    {
      "title": "should remove a registered controller by name",
      "fullTitle": "The controllers-info-cache module should remove a registered controller by name",
      "duration": 1
    },
    {
      "title": "should add a registered controller to socket 1 and then remove it by socket id",
      "fullTitle": "The controllers-info-cache module should add a registered controller to socket 1 and then remove it by socket id",
      "duration": 1
    },
    {
      "title": "should add a registered controller to socket 1 and get it by name",
      "fullTitle": "The controllers-info-cache module should add a registered controller to socket 1 and get it by name",
      "duration": 1
    },
    {
      "title": "should add a registered controller to socket 2 and get it by socketid",
      "fullTitle": "The controllers-info-cache module should add a registered controller to socket 2 and get it by socketid",
      "duration": 0
    },
    {
      "title": "should clear the socket id to controller hash mapping",
      "fullTitle": "The controllers-info-cache module should clear the socket id to controller hash mapping",
      "duration": 1
    },
    {
      "title": "should reject adding a null controller",
      "fullTitle": "The controllers-info-cache module should reject adding a null controller",
      "duration": 0
    },
    {
      "title": "should reject adding a controller without name",
      "fullTitle": "The controllers-info-cache module should reject adding a controller without name",
      "duration": 1
    },
    {
      "title": "should reject adding a controller without socketId",
      "fullTitle": "The controllers-info-cache module should reject adding a controller without socketId",
      "duration": 0
    },
    {
      "title": "should reject removal of a null controller with name",
      "fullTitle": "The controllers-info-cache module should reject removal of a null controller with name",
      "duration": 0
    },
    {
      "title": "should reject removal of a null controller with socketId",
      "fullTitle": "The controllers-info-cache module should reject removal of a null controller with socketId",
      "duration": 0
    },
    {
      "title": "should reject removal of a nonregistered controller with name",
      "fullTitle": "The controllers-info-cache module should reject removal of a nonregistered controller with name",
      "duration": 0
    },
    {
      "title": "should reject removal of a nonregistered controller with socketId",
      "fullTitle": "The controllers-info-cache module should reject removal of a nonregistered controller with socketId",
      "duration": 0
    },
    {
      "title": "should reject getting a null controller with name",
      "fullTitle": "The controllers-info-cache module should reject getting a null controller with name",
      "duration": 1
    },
    {
      "title": "should reject getting a null controller with socketId",
      "fullTitle": "The controllers-info-cache module should reject getting a null controller with socketId",
      "duration": 0
    },
    {
      "title": "should accept adding two controllers with same name two different sockets",
      "fullTitle": "The controllers-info-cache module should accept adding two controllers with same name two different sockets",
      "duration": 0
    },
    {
      "title": "should not delete the controller from the cache, if 2 sockets exist for the same controller and the first connection terminated",
      "fullTitle": "The controllers-info-cache module should not delete the controller from the cache, if 2 sockets exist for the same controller and the first connection terminated",
      "duration": 1
    },
    {
      "title": "should be able to retrieve the Redis Replication Groups topology",
      "fullTitle": "Redis Client Manager should be able to retrieve the Redis Replication Groups topology",
      "duration": 1
    },
    {
      "title": "should be able to return the primary cache client",
      "fullTitle": "Redis Client Manager should be able to return the primary cache client",
      "duration": 0
    },
    {
      "title": "should be able to return the replica cache client",
      "fullTitle": "Redis Client Manager should be able to return the replica cache client",
      "duration": 0
    },
    {
      "title": "should not reconfigure the replication group when no change in the topology",
      "fullTitle": "Redis Client Manager should not reconfigure the replication group when no change in the topology",
      "duration": 1
    },
    {
      "title": "should not reconfigure the replication group when the topology state is 'modyfing' ",
      "fullTitle": "Redis Client Manager should not reconfigure the replication group when the topology state is 'modyfing' ",
      "duration": 0
    },
    {
      "title": "should be able to reconfigure the replication group and reconnect on the cache nodes when a failover occured",
      "fullTitle": "Redis Client Manager should be able to reconfigure the replication group and reconnect on the cache nodes when a failover occured",
      "duration": 4
    },
    {
      "title": "should get an error when retrieving a Redis Replication Groups topology with an invalid group id",
      "fullTitle": "Redis Client Manager should get an error when retrieving a Redis Replication Groups topology with an invalid group id",
      "duration": 0
    },
    {
      "title": "getNodes should return a node registered for the service",
      "fullTitle": "The service-info-cache module getNodes should return a node registered for the service",
      "duration": 27
    },
    {
      "title": "getNodes should return all nodes registered for the service",
      "fullTitle": "The service-info-cache module getNodes should return all nodes registered for the service",
      "duration": 27
    },
    {
      "title": "getNodes should eventually stop returning dead service nodes",
      "fullTitle": "The service-info-cache module getNodes should eventually stop returning dead service nodes",
      "duration": 122
    },
    {
      "title": "getNodes should handle an empty list",
      "fullTitle": "The service-info-cache module getNodes should handle an empty list",
      "duration": 1
    },
    {
      "title": "getRandomNode should return an error if no node available",
      "fullTitle": "The service-info-cache module getRandomNode should return an error if no node available",
      "duration": 0
    }
  ],
  "failures": [],
  "passes": [
    {
      "title": "should add a registered controller",
      "fullTitle": "The controllers-info-cache module should add a registered controller",
      "duration": 2
    },
    {
      "title": "should remove a registered controller by name",
      "fullTitle": "The controllers-info-cache module should remove a registered controller by name",
      "duration": 1
    },
    {
      "title": "should add a registered controller to socket 1 and then remove it by socket id",
      "fullTitle": "The controllers-info-cache module should add a registered controller to socket 1 and then remove it by socket id",
      "duration": 1
    },
    {
      "title": "should add a registered controller to socket 1 and get it by name",
      "fullTitle": "The controllers-info-cache module should add a registered controller to socket 1 and get it by name",
      "duration": 1
    },
    {
      "title": "should add a registered controller to socket 2 and get it by socketid",
      "fullTitle": "The controllers-info-cache module should add a registered controller to socket 2 and get it by socketid",
      "duration": 0
    },
    {
      "title": "should clear the socket id to controller hash mapping",
      "fullTitle": "The controllers-info-cache module should clear the socket id to controller hash mapping",
      "duration": 1
    },
    {
      "title": "should reject adding a null controller",
      "fullTitle": "The controllers-info-cache module should reject adding a null controller",
      "duration": 0
    },
    {
      "title": "should reject adding a controller without name",
      "fullTitle": "The controllers-info-cache module should reject adding a controller without name",
      "duration": 1
    },
    {
      "title": "should reject adding a controller without socketId",
      "fullTitle": "The controllers-info-cache module should reject adding a controller without socketId",
      "duration": 0
    },
    {
      "title": "should reject removal of a null controller with name",
      "fullTitle": "The controllers-info-cache module should reject removal of a null controller with name",
      "duration": 0
    },
    {
      "title": "should reject removal of a null controller with socketId",
      "fullTitle": "The controllers-info-cache module should reject removal of a null controller with socketId",
      "duration": 0
    },
    {
      "title": "should reject removal of a nonregistered controller with name",
      "fullTitle": "The controllers-info-cache module should reject removal of a nonregistered controller with name",
      "duration": 0
    },
    {
      "title": "should reject removal of a nonregistered controller with socketId",
      "fullTitle": "The controllers-info-cache module should reject removal of a nonregistered controller with socketId",
      "duration": 0
    },
    {
      "title": "should reject getting a null controller with name",
      "fullTitle": "The controllers-info-cache module should reject getting a null controller with name",
      "duration": 1
    },
    {
      "title": "should reject getting a null controller with socketId",
      "fullTitle": "The controllers-info-cache module should reject getting a null controller with socketId",
      "duration": 0
    },
    {
      "title": "should accept adding two controllers with same name two different sockets",
      "fullTitle": "The controllers-info-cache module should accept adding two controllers with same name two different sockets",
      "duration": 0
    },
    {
      "title": "should not delete the controller from the cache, if 2 sockets exist for the same controller and the first connection terminated",
      "fullTitle": "The controllers-info-cache module should not delete the controller from the cache, if 2 sockets exist for the same controller and the first connection terminated",
      "duration": 1
    },
    {
      "title": "should be able to retrieve the Redis Replication Groups topology",
      "fullTitle": "Redis Client Manager should be able to retrieve the Redis Replication Groups topology",
      "duration": 1
    },
    {
      "title": "should be able to return the primary cache client",
      "fullTitle": "Redis Client Manager should be able to return the primary cache client",
      "duration": 0
    },
    {
      "title": "should be able to return the replica cache client",
      "fullTitle": "Redis Client Manager should be able to return the replica cache client",
      "duration": 0
    },
    {
      "title": "should not reconfigure the replication group when no change in the topology",
      "fullTitle": "Redis Client Manager should not reconfigure the replication group when no change in the topology",
      "duration": 1
    },
    {
      "title": "should not reconfigure the replication group when the topology state is 'modyfing' ",
      "fullTitle": "Redis Client Manager should not reconfigure the replication group when the topology state is 'modyfing' ",
      "duration": 0
    },
    {
      "title": "should be able to reconfigure the replication group and reconnect on the cache nodes when a failover occured",
      "fullTitle": "Redis Client Manager should be able to reconfigure the replication group and reconnect on the cache nodes when a failover occured",
      "duration": 4
    },
    {
      "title": "should get an error when retrieving a Redis Replication Groups topology with an invalid group id",
      "fullTitle": "Redis Client Manager should get an error when retrieving a Redis Replication Groups topology with an invalid group id",
      "duration": 0
    },
    {
      "title": "getNodes should return a node registered for the service",
      "fullTitle": "The service-info-cache module getNodes should return a node registered for the service",
      "duration": 27
    },
    {
      "title": "getNodes should return all nodes registered for the service",
      "fullTitle": "The service-info-cache module getNodes should return all nodes registered for the service",
      "duration": 27
    },
    {
      "title": "getNodes should eventually stop returning dead service nodes",
      "fullTitle": "The service-info-cache module getNodes should eventually stop returning dead service nodes",
      "duration": 122
    },
    {
      "title": "getNodes should handle an empty list",
      "fullTitle": "The service-info-cache module getNodes should handle an empty list",
      "duration": 1
    },
    {
      "title": "getRandomNode should return an error if no node available",
      "fullTitle": "The service-info-cache module getRandomNode should return an error if no node available",
      "duration": 0
    }
  ]
}