fs            = require "fs"
global.logger = require('bunyan').createLogger name: module.filename

module.exports = (grunt) ->
  SRC_DIR        = 'src'
  LIB_DIR        = 'lib'
  TEST_UNIT_DIR  = 'test/unit'
  TEST_LOCAL_DIR = 'test/local'
  REPORT_DIR     = 'test-reports'

  # load all grunt tasks
  (require "matchdep").filterDev("grunt-*").forEach(grunt.loadNpmTasks)

  # Project configuration.
  grunt.initConfig
    clean:
      dist: [LIB_DIR, REPORT_DIR]
      build: [LIB_DIR]

    shell:
      createReportsDir:
        command: "mkdir -p #{REPORT_DIR}"
        options:
          stdout: true
          stderr: true
      testUnit:
        command: [
          "grunt mochaTest:testUnit mochaTest:coverageUnit mochaTest:coverageUnitJson"
        ].join '&&'
        options:
          stdout: true
          stderr: true
          failOnError:true

    coffee:
      compileEachMap:
        options:
          sourceMap: false
        files: [
          expand: true
          flatten: false
          cwd: SRC_DIR
          src: ['**/*.coffee']
          dest: LIB_DIR
          ext: '.js'
        ]

    mochaTest:
      testUnit:
        src: [ "#{TEST_UNIT_DIR}/*.coffee"]
        options:
          require: 'coverage/blanket'
          reporter: 'mocha-multi'
          quiet: true

      coverageUnit:
        src: [ "#{TEST_UNIT_DIR}/*.coffee"]
        options:
          reporter: 'html-cov'
          captureFile: "#{REPORT_DIR}/coverage.html"
          quiet: true

      coverageUnitJson:
        src: [ "#{TEST_UNIT_DIR}/*.coffee"]
        options:
          reporter: 'json-cov'
          captureFile: "#{REPORT_DIR}/coverage.json"
          quiet: true

    coffeelint:
      options:
        configFile: "node_modules/se-common-resources/coffeelint-rules.json"
      src:
        files:
          src: [ "#{SRC_DIR}/**/*.coffee", "#{TEST_UNIT_DIR}/**/*.coffee" ]

    bump:
      options:
        files              : ['package.json'],
        updateConfigs      : [],
        commit             : true
        commitMessage      : 'Release v%VERSION%',
        commitFiles        : ['package.json'],
        createTag          : true,
        tagName            : 'v%VERSION%',
        tagMessage         : 'Version %VERSION%',
        push               : true,
        pushTo             : 'origin',
        gitDescribeOptions : '--tags --always --abbrev=1 --dirty=-d',
        globalReplace      : false,
        prereleaseName     : null

  grunt.registerTask 'upgradeVersion', 'Upgrade version of package.json file', ->
    # Upgrade package.json file
    packageFilePath = "#{process.cwd()}/package.json"
    packageBuffer   = fs.readFileSync packageFilePath
    packageContent  = JSON.parse packageBuffer

    if process.env.Release_Version? and process.env.Release_Version isnt ""
      packageContent.version = "#{process.env.Release_Version}-g#{process.env.GIT_HASH}"
    else
      packageContent.version = "#{process.env.GIT_TAG}"

    fs.writeFileSync packageFilePath, JSON.stringify(packageContent, null, " ")

  grunt.registerTask 'test-unit', ->
    process.env.multi = "xunit=#{REPORT_DIR}/xunit.xml json=#{REPORT_DIR}/report.json spec=-"
    grunt.task.run [ 'coffeelint', 'shell:createReportsDir', 'shell:testUnit' ]

  grunt.registerTask 'compile', ['clean:build', 'coffee']

  grunt.registerTask 'default', ['compile']
  grunt.registerTask 'checkstyle', ['coffeelint']
