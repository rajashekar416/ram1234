'use strict';

var dns       = require('dns');
var netUtils  = require('se-common-utils').netUtils;

module.exports = function(config, done) {

  getCurrentHostAddress(function(err, currentAddress) {
    if (err != null) { return done(err); }

    var directory = {
      self            : getSelfConfig(currentAddress),
      serverApp       : getServerAppConfig(config, currentAddress),
      controllerProxy : getControllerProxyConfig(config, currentAddress),
      redis           : getRedisConfig(config),
      mongo           : getMongoConfig(config)
    };

    if (global.logger != null) {
      global.logger.debug('services directory:', directory);
    }

    done(null, directory);
  });
};

function getCurrentHostAddress(done) {
  var address = netUtils.getNetworkAddress();
  done(null, address);
}

function getSelfConfig(currentAddress) {
  return {
    host : currentAddress
  };
}

function getServerAppConfig(config, currentAddress) {
  return {
    host : process.env.SERVERAPP_PORT_3000_TCP_ADDR || currentAddress,
    port : process.env.SERVERAPP_PORT_3000_TCP_PORT || '3000',
  };
}

function getControllerProxyConfig(config, currentAddress) {
  return {
    'ws' : {
      host : process.env.SERVERAPP_PORT_9000_TCP_ADDR || currentAddress,
      port : process.env.SERVERAPP_PORT_9000_TCP_PORT || config.SERVER_WEBSOCKET_PORT || '9000',
    },
    'http' : {
      host : process.env.SERVERAPP_PORT_3002_TCP_ADDR || currentAddress,
      port : process.env.SERVERAPP_PORT_3002_TCP_PORT || config.SERVER_TCP_PORT || '3002',
    },
  };
}

function getRedisConfig() {
  var redis;

  if (process.env.AWS_REPLICATION_GROUP_ID != null) {
    redis = {
      aws: {
        replicationGroupId : process.env.AWS_REPLICATION_GROUP_ID,
        config             : {
          region : process.env.AWS_DEFAULT_REGION
        }
      }
    };
  }
  else {
    redis = {
      host : process.env.REDIS_PORT_6379_TCP_ADDR || 'localhost',
      port : process.env.REDIS_PORT_6379_TCP_PORT || '6379',
    };
  }

  return redis;
}

function getMongoConfig() {
  return {
    dbUri     : mkMongoUri(process.env.DB_CONNECTION_URI),
    logsDbUri : mkMongoUri(process.env.LOGS_DB_CONNECTION_URI)
  };

}

var MONGO_URI_RE = /^(mongodb:\/\/)\w+(?:\:\d+)?(\/.+)?/;
function mkMongoUri(uri) {
  if (process.env.MONGO_PORT_27017_TCP_ADDR != null) {
    var mongoAddr = process.env.MONGO_PORT_27017_TCP_ADDR + ':' + process.env.MONGO_PORT_27017_TCP_PORT;
    var dockerUrl = uri.replace(MONGO_URI_RE, '$1' + mongoAddr + '$2');
    return dockerUrl;
  }
  else {
    return uri;
  }
}
