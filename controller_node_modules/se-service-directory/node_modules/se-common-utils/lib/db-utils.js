(function() {
  var flashErrorMessages, flashValidationErrorMessages, isMongooseModelRegistered, isValidObjectId, mongoDbUriRegex, parseMongoUri;

  mongoDbUriRegex = /mongodb:\/\/(([-.\w^:]+):([^@,]+)@)?([-.\w]+)(:(\d+))?\/([-\w]+)/;

  /**
   * Parses a mongodb URI and returns a tokenized representation as an object
   * @param  {String} uri the mongodb connection uri
   * @return {Object}     key/value fields of the uri tokens
  */


  parseMongoUri = function(uri) {
    var res;
    res = uri.match(mongoDbUriRegex);
    return {
      username: res[2],
      password: res[3],
      host: res[4],
      port: res[6],
      db: res[7]
    };
  };

  /**
   * Check if a Schema is registered
   * @param  {Object}       Mongoose instance
   * @param  {String}       Schema's name
   * @return {boolean}      true if model exists, false otherwise
  */


  isMongooseModelRegistered = function(db, schemaName) {
    var _ref;
    return ((_ref = db.models) != null ? _ref[schemaName] : void 0) != null;
  };

  /**
   * Sets the proper flash message depending on the model validation error type
   * @param  {Object} err      the mongoose validation error object
   * @param  {JSON}   messages JSON Object mapping validation type with error message
   * @param  {Object} req      the connect request object
  */


  flashValidationErrorMessages = function(err, messages, req) {
    var errors, path, _ref, _ref1, _results;
    if ((err != null ? err.errors : void 0) != null) {
      _ref = err.errors;
      _results = [];
      for (path in _ref) {
        errors = _ref[path];
        if (((_ref1 = messages[errors.path]) != null ? _ref1[errors.type] : void 0) != null) {
          _results.push(req.flash('error', messages[errors.path][errors.type]));
        } else {
          logger.error("Missing message resource for validation type: '" + errors.type + "'");
          if (messages["default"] != null) {
            _results.push(req.flash('error', messages["default"]));
          } else {
            _results.push(req.flash('error', "We are unable to fulfill your request at this moment. Please contact support."));
          }
        }
      }
      return _results;
    } else if ((err != null) && (messages["default"] != null)) {
      return req.flash('error', messages["default"]);
    }
  };

  /**
   * Sets the proper flash message depending on the model error type
   * @param  {Object} err      the mongoose validation error object
   * @param  {JSON}   messages JSON Object mapping error type with error message
   * @param  {Object} req      the connect request object
  */


  flashErrorMessages = function(err, messages, req) {
    if ((err != null ? err.message : void 0) != null) {
      if (messages[err.message] != null) {
        return req.flash(messages[err.message].type, messages[err.message].message);
      } else {
        logger.error("Missing message resource for error message: '" + err.message + "'");
        if (messages["default"] != null) {
          return req.flash('error', messages["default"]);
        } else {
          return req.flash('error', "We are unable to fulfill your request at this moment. Please contact support.");
        }
      }
    } else {
      if ((err != null) && (messages["default"] != null)) {
        return req.flash('error', messages["default"]);
      }
    }
  };

  /**
   * Returnd true if string is a mongoDB ObjectId, toherwise returns false
   * @param  {string} string ObjectId to check
  */


  isValidObjectId = function(string) {
    var _ref;
    return (string != null ? (_ref = string.match(/^[0-9a-fA-F]{24}$/)) != null ? _ref.length : void 0 : void 0) === 1;
  };

  module.exports = {
    parseMongoUri: parseMongoUri,
    isMongooseModelRegistered: isMongooseModelRegistered,
    flashValidationErrorMessages: flashValidationErrorMessages,
    flashErrorMessages: flashErrorMessages,
    isValidObjectId: isValidObjectId
  };

}).call(this);
