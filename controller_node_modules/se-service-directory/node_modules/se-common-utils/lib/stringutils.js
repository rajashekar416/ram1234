(function() {
  var crypto, encrypt, formatLogErrorMessage, prefix, replaceCharInKeys;

  crypto = require('crypto');

  /**
   * Replaces given character in object's keys recursively
   * @param  {Object} obj     the object for which keys need to be reformatted
   * @param  {String} char    the string that needs to be replaced
   * @param  {String} newChar the replacement string
  */


  replaceCharInKeys = function(obj, char, newChar) {
    var key;
    if (typeof obj === "object") {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          obj[key.replace(char, newChar)] = replaceCharInKeys(obj[key], char, newChar);
          if (key.indexOf(char) > -1) {
            delete obj[key];
          }
        }
      }
    }
    return obj;
  };

  prefix = function(stringToPrefix, prefix) {
    if (stringToPrefix.indexOf(prefix) !== 0) {
      return prefix + stringToPrefix;
    }
    return stringToPrefix;
  };

  /**
   * Encryption function that should be used mostly to generate token hashes.
   * This utility function shouldn't be used to encrypt passwords or
   * sensitive data.  User account passwords are encrypted using a slower but
   * more secure way using bcrypt.
   * @param  {Strin} string     the string to be hsahsed
   * @param  {String} cryptoKey the crypto key salt string
   * @return {String}           the hashed value of the input string in a hex format
  */


  encrypt = function(string, cryptoKey) {
    return crypto.createHmac('sha512', cryptoKey).update(string).digest('hex');
  };

  /**
   * Provides a uniform way of formatting error messages with
   * information on the user logged in and the route invoked
   * @param  {Object} req the http request object
   * @param  {Object} err the error instance
   * @return {String}
  */


  formatLogErrorMessage = function(req, err) {
    var _ref;
    return "User ID: " + ((_ref = req.user) != null ? _ref._id : void 0) + " - Uri: " + req.originalUrl + " : " + (err.toString());
  };

  module.exports = {
    prefix: prefix,
    encrypt: encrypt,
    replaceCharInKeys: replaceCharInKeys,
    formatLogErrorMessage: formatLogErrorMessage
  };

}).call(this);
