(function() {
  var fs, getFilePath, loadConfigFile, logger, saveConfigToFile, stripComments, tmpfs, util;

  fs = require('fs');

  util = require('util');

  tmpfs = require('./tmpfs');

  if (typeof logger === "undefined" || logger === null) {
    logger = require('winston');
  }

  /**
   * Remove all javascript commentaries from a string
   * @return {string}   JSON string
  */


  stripComments = function(fileStr) {
    var primIndex, primitives, uid;
    uid = '_' + +new Date();
    primitives = [];
    primIndex = 0;
    return fileStr.replace(/(['"])(\\\1|.)+?\1/g, function(match) {
      primitives[primIndex] = match;
      return (uid + '') + primIndex++;
    }).replace(/([^\/])(\/(?!\*|\/)(\\\/|.)+?\/[gim]{0,3})/g, function(match, $1, $2) {
      primitives[primIndex] = $2;
      return $1 + (uid + '') + primIndex++;
    }).replace(/\/\/.*?\/?\*.+?(?=\n|\r|$)|\/\*[\s\S]*?\/\/[\s\S]*?\*\//g, '').replace(/\/\/.+?(?=\n|\r|$)|\/\*[\s\S]+?\*\//g, '').replace(RegExp('\\/\\*[\\s\\S]+' + uid + '\\d+', 'g'), '').replace(RegExp(uid + '(\\d+)', 'g'), function(match, n) {
      return primitives[n];
    });
  };

  /**
   * Computes the path file of the default config file
   * @return {string}   path of config file
  */


  getFilePath = function() {
    var filePath, filePathPattern;
    filePathPattern = "" + (process.cwd()) + "/config%s.json";
    filePath = null;
    switch (process.env.NODE_ENV) {
      case 'test':
        filePath = util.format(filePathPattern, '-test');
        if (!fs.existsSync(filePath)) {
          filePath = util.format(filePathPattern, '');
        }
        break;
      case 'staging':
        filePath = util.format(filePathPattern, '-staging');
        if (!fs.existsSync(filePath)) {
          filePath = util.format(filePathPattern, '');
        }
        break;
      case 'production':
        filePath = util.format(filePathPattern, '');
        break;
      default:
        filePath = util.format(filePathPattern, '-dev');
        if (!fs.existsSync(filePath)) {
          filePath = util.format(filePathPattern, '');
        }
    }
    return filePath;
  };

  /**
   * Load a JSON file and strip comments.
   * @param  {string}   filePath         the path to the file where the representation of the config object will be written.
   * @param  {object}   defaultConfig    the default configuration to use
   * @return {object}   the JSON object  loaded configuration
  */


  loadConfigFile = function(filePath, defaultConfig) {
    var config, defaultConfigKey, defaultConfigValue, error, fileConfig, fileConfigKey, fileConfigValue, fileContent, loggerImpl;
    config = {};
    for (defaultConfigKey in defaultConfig) {
      defaultConfigValue = defaultConfig[defaultConfigKey];
      config[defaultConfigKey] = defaultConfigValue;
    }
    fileContent = null;
    if ((filePath == null) && (defaultConfig == null)) {
      filePath = getFilePath();
    }
    try {
      fileContent = fs.readFileSync(filePath);
    } catch (_error) {
      error = _error;
      loggerImpl = logger.error;
      if ((error.code != null) && error.code === 'ENOENT') {
        loggerImpl = logger.warn;
      }
      loggerImpl('Could not read file at path [%s], reason: %s, returning empty config object.', filePath, error);
      return config;
    }
    if (fileContent != null) {
      fileContent = stripComments(fileContent.toString());
      fileConfig = JSON.parse(fileContent);
      for (fileConfigKey in fileConfig) {
        fileConfigValue = fileConfig[fileConfigKey];
        config[fileConfigKey] = process.env[fileConfigKey] || fileConfigValue;
      }
      logger.info("Using config file located at: %s", filePath);
    }
    return config;
  };

  /**
   * Saves an object representing an app's configuration to a file.
   * @param  {object}   config   an object representing a dictionary containing a configuration's key/value pairs.
   * @param  {string}   filePath the path to the file where the representation of the config object will be written.
   * @param  {Function} done     a callback that is called when the save process is done.
   * @return {nothing}
  */


  saveConfigToFile = function(config, filePath, done) {
    var data;
    filePath = filePath || getFilePath();
    data = JSON.stringify(config, null, " ") + '\n';
    return fs.writeFile(filePath, data, done);
  };

  module.exports = {
    loadConfigFile: loadConfigFile,
    saveConfigToFile: saveConfigToFile
  };

}).call(this);
