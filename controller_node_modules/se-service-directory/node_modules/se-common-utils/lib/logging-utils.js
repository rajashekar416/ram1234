(function() {
  var appendModuleName, defaultMeta, env, fs, os, parentConf, path, registerConsoleLogger, registerFileLogger, registerLogStashLogger, registerSyslogLogger, util, winston, winstonConfigMonitor, _;

  _ = require('lodash');

  fs = require('fs');

  os = require('os');

  util = require('util');

  winstonConfigMonitor = require('winston-config-monitor');

  path = require('path');

  require('winston-logstash');

  require('winston-posix-syslog');

  env = process.env.NODE_ENV;

  parentConf = require("" + (process.cwd()) + "/package.json");

  winston = winstonConfigMonitor.getLogger();

  defaultMeta = {
    hostname: os.hostname(),
    app_name: parentConf.name
  };

  registerConsoleLogger = function(optionsPath, loggersOptions) {
    if ((env == null) || env === 'development' && (loggersOptions.console != null)) {
      return winstonConfigMonitor.add(winston.transports.Console, optionsPath, "loggersOptions.console");
    }
  };

  registerLogStashLogger = function(optionsPath, loggersOptions) {
    var logstashOpts;
    logstashOpts = _.clone(loggersOptions.logstash, true);
    if (env === 'production' && (logstashOpts != null)) {
      logstashOpts.meta = defaultMeta;
      return winston.add(winston.transports.Logstash, logstashOpts);
    }
  };

  registerSyslogLogger = function(optionsPath, loggersOptions) {
    var log;
    if (loggersOptions.syslog != null) {
      winstonConfigMonitor.add(winston.transports.PosixSyslog, optionsPath, "loggersOptions.syslog");
      log = winston.transports.PosixSyslog.prototype.log;
      return winston.transports.PosixSyslog.prototype.log = function(level, msg, userMeta, done) {
        var meta;
        meta = _.merge({}, userMeta || {}, defaultMeta);
        return log.apply(this, arguments);
      };
    }
  };

  registerFileLogger = function(optionsPath, loggersOptions) {
    if (loggersOptions.file != null) {
      return winstonConfigMonitor.add(winston.transports.File, optionsPath, "loggersOptions.file");
    }
  };

  appendModuleName = function() {
    var log, prepareStackTrace, stackTraceLimit, _logWrapper;
    log = winston.log;
    stackTraceLimit = Error.stackTraceLimit;
    prepareStackTrace = Error.prepareStackTrace;
    _logWrapper = function(level, msg, meta, done) {
      var dummyObject, filename, lineNumber;
      dummyObject = {};
      Error.stackTraceLimit = 3;
      Error.prepareStackTrace = function(dummyObject, v8StackTrace) {
        return v8StackTrace;
      };
      Error.captureStackTrace(dummyObject);
      filename = path.basename(dummyObject.stack[2].getFileName());
      lineNumber = dummyObject.stack[2].getLineNumber();
      Error.stackTraceLimit = stackTraceLimit;
      Error.prepareStackTrace = prepareStackTrace;
      msg = util.format("[%s:%s] %s", filename, lineNumber, msg);
      return log.apply(this, arguments);
    };
    return winston.log = _logWrapper;
  };

  module.exports = {
    getLogger: function(optionsPath, enableTrace) {
      var loggersOptions;
      if (enableTrace == null) {
        enableTrace = false;
      }
      loggersOptions = require(optionsPath).loggersOptions;
      winstonConfigMonitor.clear();
      registerConsoleLogger(optionsPath, loggersOptions);
      registerLogStashLogger(optionsPath, loggersOptions);
      registerFileLogger(optionsPath, loggersOptions);
      registerSyslogLogger(optionsPath, loggersOptions);
      if (enableTrace) {
        appendModuleName();
      }
      return winston;
    }
  };

}).call(this);
