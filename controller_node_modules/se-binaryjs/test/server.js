var assert       = require('assert');
var http         = require('http');
var binaryjs     = require('../');

var BinaryServer = binaryjs.BinaryServer;
var BinaryClient = binaryjs.BinaryClient;

var server, client, serverUrl = 'ws://localhost:9101';

describe('BinaryServer', function(){
  describe('creating servers', function(){
    it('should allow creating servers with a port', function(){
      server = new BinaryServer({port: 9101});
    });

    it('should allow creating servers with an http server', function(done){
      // Build the http server
      var server = http.createServer(function(request, response) {
        response.writeHead(200, {"Content-Type": "text/html"});
        response.write("<!DOCTYPE \"html\">");
        response.write("<html>");
        response.write("<head>");
        response.write("<title>Hello World Page</title>");
        response.write("</head>");
        response.write("<body>");
        response.write("Hello World!");
        response.write("</body>");
        response.write("</html>");
        response.end();
      });

      server.listen(9102);

      // Register the binary Js server over the http server
      bServer = new BinaryServer({server: server});
      bServer.on("error", function(error){
        done(error);
      });

      done();
    });
  });

  describe('.clients', function(){
    it('should contain a list of clients', function(done){
      var nbClients        = 10;
      var currentNbClients = 0;
      var startLength      = Object.keys(server.clients).length;

      server.on('connection', function onConnection(client){
        assert.equal(server.clients[client.id], client);
        if(++currentNbClients >= nbClients) {
          var endLength = Object.keys(server.clients).length;
          assert.equal(endLength - startLength, nbClients);
          server.removeListener('connection', onConnection);
          done();
        }
      });

      // create 'nbClients' clients
      for (var index = 0; index < nbClients; ++index) {
        new BinaryClient(serverUrl);
      }
    });
  });

  describe('server clients', function() {
    it('should bubble up ping events from underlying sockets', function(done) {
      server.once('connection', function(client) {
        client.on('ping', done);
      });
      new BinaryClient(serverUrl);
    });
  });

  describe('.close()', function(){
    it('should prevent future clients connecting by throwing an error', function(done){

      var client = new BinaryClient(serverUrl);
      client.on('error', function(){
        done();
      });

      server.close();
    });
  });
});
