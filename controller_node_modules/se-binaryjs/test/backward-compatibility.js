var assert       = require('assert');
var binaryjs     = require('../');
var chai         = require("chai");
var expect       = chai.expect;
var fs           = require('fs');

var BinaryServer    = binaryjs.BinaryServer;
var BinaryClient    = binaryjs.BinaryClient;

var server, client, serverUrl = 'ws://localhost:9101';

var webSocketOptions = {
  webSocketOptions: {
    customHeaders: {
      "version-lib": ""
    }
  }
};

var complexObject = {
  string      : "This is a String",
  integer     : 0,
  number      : Number(10),
  emptyString : "",
  true        : true,
  false       : false,
  null        : null,
  buffer      : new Buffer("This is a buffer"),
  binary      : fs.readFileSync(__dirname + "/data/Firmware_update_V2.12.4.23_SCE_orig.bp"),
  inception: {
    string      : "This is a String",
    integer     : 0,
    true        : true,
    false       : false,
    number      : Number(10),
    emptyString : "",
    null        : null,
    buffer      : new Buffer("This is a buffer"),
    binary      : fs.readFileSync(__dirname + "/data/Firmware_update_V2.12.4.23_SCE_orig.bp")
  }
};

function DataValidator(done) {
  this.streamReceived = false;
  this.data = null;
  this.newStream = function(data) {
    if (!this.streamReceived) {
      this.data = data;
      this.streamReceived = true;
    } else {
      // add validation
      expect(this.data).to.deep.equal(data);
      done();
    }
  };
}

describe('New BinaryServer with old BinaryClient', function(){
  beforeEach(function(){
    server = new BinaryServer({port: 9101});
  });

  afterEach(function(){
    server.close();
  });

  describe('events for clients', function(){
    it('should be opennable and closeable', function(done){
      server.on('connection', function(client){
        client.on('close', function(){
          done();
        });
      });
      var client = new BinaryClient(serverUrl, webSocketOptions);
      client.on('open', function(){
        client.close();
      });
    });

    it('should receive streams', function(done){
      server.on('connection', function(client){
        client.on('stream', function(){
          done();
        });
      });
      var client = new BinaryClient(serverUrl, webSocketOptions);
      client.on('open', function(){
        client.createStream({});
      });
    });
  });

  describe('sending data', function(){
    it('should be able to send buffers', function(done){
      var string = 'test';
      server.on('connection', function(client){
        client.on('stream', function(stream){
          stream.write(complexObject);
        });
      });

      var clientOld     = new BinaryClient(serverUrl, webSocketOptions);
      var clientNew     = new BinaryClient(serverUrl);
      var dataValidator = new DataValidator(done);

      clientOld.on('open', function(){
        var stream = clientOld.createStream({});
        stream.on("data", function(data) {
          dataValidator.newStream(data);
        });
      });

      clientNew.on('open', function(){
        var stream = clientNew.createStream({});

        stream.on("data", function(data) {
          dataValidator.newStream(data);
        });
      });
    });
  });

  describe('piping data', function(){
    it('should be able to send buffers', function(done){
      var string = 'test';
      server.on('connection', function(client){
        client.on('stream', function(stream){
          var binaryObjectStream = fs.createReadStream(__dirname + "/data/Firmware_update_V2.12.4.23_SCE_orig.bp");
          binaryObjectStream.pipe(stream);
        });
      });

      var clientOld     = new BinaryClient(serverUrl, webSocketOptions);
      var clientNew     = new BinaryClient(serverUrl);
      var dataValidator = new DataValidator(done);

      clientOld.on('open', function(){
        var stream = clientOld.createStream({});
        var data   = null;
        stream.on("data", function(chunk) {
          data += chunk;
        });

        stream.on("end", function() {
          dataValidator.newStream(data);
        });
      });

      clientNew.on('open', function(){
        var stream = clientOld.createStream({});
        var data   = null;

        stream.on("data", function(chunk) {
          data += chunk;
        });

        stream.on("end", function() {
          dataValidator.newStream(data);
        });
      });
    });
  });

  describe('.streams', function(){
    it('should contain a list of streams', function(done){
      server.on('connection', function(client){
        var i = 0;
        var startLength = Object.keys(client.streams).length;
        client.on('stream', function(stream){
          assert.equal(client.streams[stream.id], stream);
          if(++i == 4) {
            var endLength = Object.keys(client.streams).length;
            assert.equal(endLength - startLength, i);
            done();
          }
        });
        var stream = client.createStream({});
        assert.equal(client.streams[stream.id], stream);
        i++;
        stream = client.createStream({});
        assert.equal(client.streams[stream.id], stream);
        i++;
      });
      var client = new BinaryClient(serverUrl, webSocketOptions);
      client.on('open', function(){
        client.createStream({});
        client.createStream({});
      });
    });

    it('should delete streams upon close event', function(done){
      var closed = 0;
      server.on('connection', function(client){
        client.on('stream', function(stream){
          stream.on('close', function(){
            assert(!(stream.id in client.streams));
            done();
          });
        });
        var stream = client.createStream({});
        stream.on('close', function(){
          assert(!(stream.id in client.streams));
        });
        stream.destroy();
      });
      var client = new BinaryClient(serverUrl, webSocketOptions);
      client.on('open', function(){
        var stream = client.createStream({});
        stream.destroy();
      });
    });
  });
});

