var assert       = require('assert');
var util         = require("util");
var binaryjs     = require('../');
var stringUtil   = require('string');
var chai         = require("chai");
var expect       = chai.expect;
var sinon        = require("sinon");
var spy          = sinon.spy();
var fs           = require('fs');

var BinaryServer = binaryjs.BinaryServer;
var BinaryClient = binaryjs.BinaryClient;

var server, client, serverUrl = 'ws://localhost:9101';

var complexObject = {
  string      : "This is a String",
  integer     : 0,
  number      : Number(10),
  emptyString : "",
  true        : true,
  false       : false,
  null        : null,
  buffer      : new Buffer("This is a buffer"),
  date        : new Date(),
  function    : function() {
    return null;
  },
  inception: {
    string      : "This is a String",
    integer     : 0,
    true        : true,
    false       : false,
    number      : Number(10),
    emptyString : "",
    null        : null,
    buffer      : new Buffer("This is a buffer"),
    date        : new Date(),
    function    : function() {
      return null;
    }
  }
};

var circualObject = {
  name: "circular"
};

circualObject.circular = circualObject;

var hugeObject = null;
var objectSize = 15000;
var fieldSize  = 100;

// Load a binary object in order to check if binaryJs sends it correctly
var binaryObject = fs.readFileSync(__dirname + "/data/Firmware_update_V2.12.4.23_SCE_orig.bp");

/**
 * Removes fields that not take into account by msgpack requirements.
 * @param   data      Object to format
 * @return            Formatted Object
 **/
var formatObject = function(data) {
  for (var key in data) {
    switch(typeof data[key]) {
      case 'string':
        break;
      case 'number':
        break;
      case 'function':
        delete data[key];
        break;
      case 'object':
        if (data.hasOwnProperty(key) &&
            data[key] !== undefined &&
            "function" !== typeof data[key])
        {
          data[key] = formatObject(data[key]);
        } else {
          delete data[key];
        }
        break;
    }
  }
  return data;
};

/**
 * Build a JSON object.
 * @param   objectSize  Number of field of JSON object
 * @param   fieldSize   Size of each field of JSON Object
 * @return              JSON Object
 **/
var buildHugeObject = function (objectSize, fieldSize) {
  var obj = {};

  for (var index = 0; index < objectSize; ++index) {
    obj["field_" + index] = stringUtil('a').padLeft(fieldSize, 'a').s;
  }

  return obj;
};

describe('BinaryJs with msgpack5', function(){

  before(function(done) {
    hugeObject = buildHugeObject(objectSize, fieldSize);
    done();
  });

  beforeEach(function(){
    server = new BinaryServer({port: 9101});
  });

  afterEach(function(){
    server.close();
  });

  describe('sending data', function(){
    it('should explodes if a circular JSON is sent', function(done){
      server.on('connection', function(client){
        client.on('stream', function(stream){
          var spy = sinon.spy(stream, "write");
          try {
            stream.write(circualObject);
          } catch (err) {
            expect(spy.alwaysThrew("RangeError")).to.be.true;
            done();
          }
        });
      });

      var client = new BinaryClient(serverUrl);

      client.on('open', function(){
        var stream = client.createStream({});
      });
    });

    it('should remove Functions objects', function(done){
      server.on('connection', function(client){
        client.on('stream', function(stream){
          stream.write(complexObject);
        });
      });

      var client = new BinaryClient(serverUrl);

      client.on('open', function(){
        var stream = client.createStream({});

        stream.on("data", function(data) {
          expect(formatObject(complexObject)).to.deep.equal(data);
          done();
        });
      });
    });

    it('should be able to send/receive more than ' + objectSize + ' objects in less than 5 seconds (1Ghz CPU)', function(done){
      this.timeout(5000);
      server.on('connection', function(client){
        client.on('stream', function(stream){
          stream.write(hugeObject);
        });
      });

      var client = new BinaryClient(serverUrl);

      client.on('open', function(){
        var stream = client.createStream({});

        stream.on("data", function(data) {
          expect(hugeObject).to.deep.equal(data);
          done();
        });
      });
    });

    it('should be able to send/receive a binary object', function(done){
      server.on('connection', function(client){
        client.on('stream', function(stream){
          stream.write(binaryObject);
        });
      });

      var client = new BinaryClient(serverUrl);

      client.on('open', function(){
        var stream = client.createStream({});

        stream.on("data", function(data) {
          expect(binaryObject).to.deep.equal(data);
          done();
        });
      });
    });
  });

});

