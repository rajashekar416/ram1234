{"version":3,"sources":["src/metrics.js"],"names":[],"mappings":"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","file":"src/metrics.js","sourcesContent":["'use strict';\n\nconst _                   = require('lodash');\nconst StatsDClient        = require('statsd-client');\n\nconst SCOPE_SEP = '.';\n\nmodule.exports = {\n  /**\n   * create a new metrics instance, configured with the supplied configuration.\n   * @param  {Object} config        the metrics configuration\n   * @param  {Object} StatsdClient  the statsd client implementation\n   * @return {Object} metrics       the root metrics instance\n   */\n  create(config = {}) {\n    if (undefined === config.enabled) {\n      config.enabled = 'true' === process.env.METRICS_ENABLED;\n    }\n    const statsd = config.enabled ? new StatsDClient(_.omit(config, 'enabled')) : null;\n    return new Metrics(statsd);\n  }\n};\n\nclass Metrics {\n  constructor(statsd) {\n    this._statsd = statsd;\n    this.enabled = null != statsd;\n\n    // for each statsd-client method, add a proxy method to the Metrics class prototype\n    const methods = [\n      'timing', 'increment', 'decrement', 'counter', 'gauge', 'gaugeDelta',\n      'set'\n    ];\n    const noop = function() {};\n    methods.forEach(function(method) {\n      this[method] = this.enabled ?  this._statsd[method].bind(this._statsd) : noop;\n    }.bind(this));\n  }\n\n  /**\n   * create a Timer instance\n   * @param  {String}   label    the label of the future timing event\n   * @return {Object}   timer    the created timer\n   */\n  createTimer(label) {\n    return new Timer(this, label);\n  }\n\n  /**\n   * create a TimerSet instance\n   * @param  {String}   label    the label of the future timing event\n   * @return {Object}   timer    the created timer set\n   */\n  createTimerSet(prefix) {\n    return new TimerSet(this, prefix);\n  }\n\n  /**\n   * wraps the supplied callback by timing the time until it is called.\n   * @param  {String}    label     the label of the future timing event\n   * @param  {Function}  callback  the wrapped callback\n   * @return {Object}    timer     the created timer set\n   */\n  timeCallback(label, callback) {\n    const timers = this.createTimerSet();\n    timers.start(label);\n    return timers.timeCallback(callback);\n  }\n\n  /**\n   * creates an express middleware that will add timing for all requests\n   * @return {Object} an express middleware\n   */\n  createExpressMiddleware() {\n    if (this._statsd) {\n      const middleware = this._statsd.helpers.getExpressMiddleware('req', { timeByUrl: true });\n      return middleware;\n    }\n  }\n\n  /**\n   * create a new Metrics instance scoped to the supplied prefix\n   * @param  {string}   prefix    the prefix of the new Metrics object\n   * @return {Metrics}  metrics   the scoped metric object\n   */\n  createScope(prefix) {\n    return new Metrics(this._statsd && this._statsd.getChildClient(prefix));\n  }\n}\n\n/**\n * convencience object that times the elapsed time between it instanciation and the call to .end()\n */\nclass Timer {\n  constructor(metrics, label) {\n    this._started = Date.now();\n    this._metrics = metrics;\n    this._label   = label;\n  }\n\n  /**\n   * ends the timer, emitting a timing event if err is null.\n   * otherwise an increment on [label].error is emitted.\n   * @param  {Error} err  [optional] the error, if any.\n   */\n  end(err) {\n    if (this._checkNotCalled()) {\n      if (null != err) {\n        this._metrics.increment(this._label + '.error');\n      }\n      else {\n        const elapsed = Date.now() - this._started;\n        this._metrics.timing(this._label, elapsed);\n      }\n    }\n  }\n\n  _checkNotCalled() {\n    if (true === this._endCalled) {\n      logger.warn('end has already been called on this timer');\n    }\n    else {\n      this._endCalled = true;\n      return true;\n    }\n  }\n}\n\n/**\n * a timer set, with a common prefix\n */\nclass TimerSet {\n  constructor(metrics, prefix) {\n    this._metrics = metrics;\n    this._scopedMetrics = metrics.createScope(prefix);\n    this._prefix = prefix;\n    this._timers  = {};\n  }\n\n  /**\n   * start a new timer with the supplied label\n   * @param  {String} label   the label of the timer. can be empty to use only the TimerSet prefix;\n   */\n  start(label) {\n    label = _normalizeLabel(label);\n    this._timers[label] = _.isEmpty(label) ?\n      this._metrics.createTimer(this._prefix) :\n      this._scopedMetrics.createTimer(label);\n  }\n\n  /**\n   * ends all the timers created to at this time.\n   * @param  {Error} err  [optional] the error, if any.\n   */\n  endAll(err) {\n    Object.keys(this._timers).forEach((label) => this.end(label, err));\n  }\n\n  /**\n    * ends the timer with the specified label.\n    * @param  {String} label the label of timer to end.\n    * @param  {Error}  err   [optional] the error, if any.\n    */\n  end(label, err) {\n    const timer = this._popTimer(label);\n    if (timer != null) {\n      timer.end(err);\n    }\n  }\n\n  _popTimer(label) {\n    label       = _normalizeLabel(label);\n    const timer = this._timers[label];\n    if (null == timer) {\n      logger.warn(`timer ${label} not found`);\n    }\n    else {\n      delete this._timers[label];\n    }\n\n    return timer;\n  }\n\n  /**\n   * wraps the supplied callback, calling endAll when invoked.\n   * @param  {Function} callback The callback to wrap.\n   * @return {Function}          The wrapping callback.\n   */\n  timeCallback(callback) {\n    const wrapperCallback = (err, ...results) => {\n      this.endAll(err);\n      callback(err, ...results);\n    };\n\n    return wrapperCallback;\n  }\n\n}\n\nfunction _normalizeLabel(label) {\n  if (null == label) {\n    return '';\n  }\n  else {\n    return label.trim();\n  }\n}\n"]}